<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_datatrans_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_datatrans'] = array(
  	'method_id' => 'commerce_datatrans',
  	'display_title' => t('Datatrans'),
    'title' => t('Datatrans'),
    'description' => t('Redirect users to submit payments through Datatrans.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 */
function commerce_datatrans_settings_form($settings = NULL) {
	
  $settings += array(
    'merchant_id' => '1000011011',
    'up_start_url' => 'https://payment.datatrans.biz/upp/jsp/upStart.jsp',
  	'req_type' => 'CAA',
  );
	
	$form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant-ID'),
    '#default_value' => $settings['merchant_id'],
  );

  $form['up_start_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Start URL'),
    '#default_value' => $settings['up_start_url'],
  );
  
  $form['req_type'] = array(
  		'#type' => 'select',
  		'#title' => t('Request Type'),
  		'#options' => array(
  				'NOA' => t('Authorization only'),
  				'CAA' => t('Authorization with immediate settlement'),
  				'ignore' => t('According to the setting in the Web Admin Tool'),
  		),
  		'#default_value' => $settings['req_type'],
  );

  return $form;

}


function commerce_datatrans_redirect_form($form, &$form_state, $order, $payment_method) {
	
	global $language;
	
	if (empty($payment_method['settings']['merchant_id'])) {
		drupal_set_message(t('Datatrans is not configured for use. No Merchant ID has been specified.'), 'error');
		return array();
	}
	
	$total = field_get_items('commerce_order', $order, 'commerce_order_total');

	// Datatrans get default gateway.
	$form['#action'] = $payment_method['settings']['up_start_url'];

	// MerchantId, mandatory.
	$form['merchantId'] = array(
			'#type' => 'hidden',
			'#value' => $payment_method['settings']['merchant_id'],
	);
	// Language of the payment.
	$form['language'] = array(
			'#type' => 'hidden',
			'#value' => $language->language,
	);
	// Request Type.
	$form['reqtype'] = array(
			'#type' => 'hidden',
			'#value' => $payment_method['settings']['req_type'],
	);
	// The total amount
	$form['amount'] = array(
			'#type' => 'hidden',
			'#value' => $total[0]['amount'],
	);
	// The currency
	$form['currency'] = array(
			'#type' => 'hidden',
			'#value' => $total[0]['currency_code'],
	);
	// Reference Number.
	$form['refno'] = array(
			'#type' => 'hidden',
			'#value' => $order->order_id,
	);
	
	$form['successUrl'] = array(
			'#type' => 'hidden',
			'#value' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
	);
	$form['errorUrl'] = array(
			'#type' => 'hidden',
			'#value' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
	);
	$form['cancelUrl'] = array(
			'#type' => 'hidden',
			'#value' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
	);

	// Submit button.
	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Proceed to Datatrans'),
			'#weight' => 50,
	);
	return $form;
	
}

/**
 * Payment method callback; validation callback for redirected payments.
 *
 * Upon return from a redirected payment service, this callback provides the
 * payment method an opportunity to validate any returned data before proceeding
 * to checkout completion; should return TRUE or FALSE indicating whether or not
 * the customer should proceed to checkout completion or go back a step in the
 * checkout process from the payment page.
 *
 * @param $order
 *   The order object.
 * @param $payment_method
 *   The payment method array.
 * @return
 *   TRUE if the customer should proceed to checkout completion or FALSE to go
 *   back one step in the checkout process.
 */
function commerce_datatrans_redirect_form_validate($order, $payment_method) {
	if (!is_array($_POST)) {
		drupal_set_message(t('Datatrans communication failure. Invalid data received from datatrans. Please contact the system administrator.'), 'error');
		return;
	}
	$datatrans = $_POST;
	
	if ($datatrans['status']=='error') {
		drupal_set_message(_commerce_datatrans_map_error_code($datatrans['errorCode']), 'error');
		return FALSE;
	}

	return TRUE;
}

/**
 * Payment method callback; submission callback for redirected payments.
 *
 * Upon return from a redirected payment service, this callback provides the
 * payment method an opportunity to perform any submission functions necessary
 * before the customer is redirected to checkout completion.
 *
 * @param $order
 *   The order object.
 * @param $payment_method
 *   The payment method array.
 */
function commerce_datatrans_redirect_form_submit($order, $payment_method) {
	if (empty($_POST)) {
		return;
	}
	_commerce_datatrans_transaction_save($payment_method, $order, $_POST, COMMERCE_PAYMENT_STATUS_SUCCESS);
}

/**
 * Payment method callback; generation callback for the payment submission form.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_values
 *   The current values of the pane.
 * @param $checkout_pane
 *   The checkout pane array. The checkout pane will be NULL if the payment is
 *   being added through the administration form.
 * @param $order
 *   The order object.
 * @return
 *   A form snippet for the checkout pane.
 */
function commerce_datatrans_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
		return array();
}

/**
 * Payment method callback; validate callback for the payment submission form.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_form
 *   The pane form.
 * @param $pane_values
 *   The current values of the pane.
 * @param $order
 *   The order object.
 * @param $form_parents
 *   The identifier of the base element of the payment pane.
 */
function commerce_datatrans_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
	return TRUE;
}


/**
 * Payment method callback: submit form submission.
 */
function commerce_datatrans_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
}

function _commerce_datatrans_get_transaction($order, $create=TRUE) {
	$query = new EntityFieldQuery();
	$result = $query
	  ->entityCondition('entity_type', 'commerce_payment_transaction')
	  ->propertyCondition('order_id', $order->order_id)
	  ->execute();
	
	if (!empty($result['commerce_payment_transaction'])) {
		return commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
	}
	else if ($create) {
		// Create a new payment transaction for the order.
		return commerce_payment_transaction_new('commerce_datatrans', $order->order_id);
	}
	else 
		return NULL;
} 

function _commerce_datatrans_transaction_save($payment_method, $order, $data, $status) {

	$transaction = _commerce_datatrans_get_transaction($order);
	$transaction->instance_id = $payment_method['instance_id'];
	$transaction->amount = $data['amount'];
	$transaction->currency_code = $data['currency'];
	$transaction->status = $status;
	$transaction->remote_id = $order->data['payment_redirect_key'];
	$transaction->payload[REQUEST_TIME] = $data;
	unset($transaction->data['error handled']);
	
	commerce_payment_transaction_save($transaction);

}

/**
 * Error code mapping.
 */
function _commerce_datatrans_map_error_code($code) {
		switch ($code) {
			case '1001':
				$message = t('Datrans transaction failed: missing required parameter.');
				break;

			case '1002':
				$message = t('Datrans transaction failed: invalid parameter format.');
				break;

			case '1003':
				$message = t('Datatrans transaction failed: value of parameter not found.');
				break;

			case '1004':
			case '1400':
				$message = t('Datatrans transaction failed: invalid card number.');
				break;

			case '1007':
				$message = t('Datatrans transaction failed: access denied by sign control/parameter sign invalid.');
				break;

			case '1008':
				$message = t('Datatrans transaction failed: merchant disabled by Datatrans.');
				break;

			case '1401':
				$message = t('Datatrans transaction failed: invalid expiration date.');
				break;

			case '1402':
			case '1404':
				$message = t('Datatrans transaction failed: card expired or blocked.');
				break;

			case '1403':
				$message = t('Datatrans transaction failed: transaction declined by card issuer.');
				break;

			case '1405':
				$message = t('Datatrans transaction failed: amount exceeded.');
				break;

			case '3000':
			case '3001':
			case '3002':
			case '3003':
			case '3004':
			case '3005':
			case '3006':
			case '3011':
			case '3012':
			case '3013':
			case '3014':
			case '3015':
			case '3016':
				$message = t('Datatrans transaction failed: denied by fraud management.');
				break;

			case '3031':
				$message = t('Datatrans transaction failed: declined due to response code 02.');
				break;

			case '3041':
				$message = t('Datatrans transaction failed: Declined due to post error/post URL check failed.');
				break;

			case '10412':
				$message = t('Datatrans transaction failed: PayPal duplicate error.');
				break;

			case '-885':
			case '-886':
				$message = t('Datatrans transaction failed: CC-alias update/insert error.');
				break;

			case '-887':
				$message = t('Datatrans transaction failed: CC-alias does not match with cardno.');
				break;

			case '-888':
				$message = t('Datatrans transaction failed: CC-alias not found.');

			case '-900':
				$message = t('Datatrans transaction failed: CC-alias service not enabled.');
				break;

			default:
				break;
				$message = t('Datatrans transaction failed: undefined error.');
			break;
		}
		
		return $message;
		
}
